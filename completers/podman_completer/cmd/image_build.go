package cmd

import (
	"github.com/rsteube/carapace"
	"github.com/spf13/cobra"
)

var image_buildCmd = &cobra.Command{
	Use:   "build",
	Short: "Build an image using instructions from Containerfiles",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(image_buildCmd).Standalone()
	image_buildCmd.Flags().StringSlice("add-host", []string{}, "add a custom host-to-IP mapping (`host:ip`) (default [])")
	image_buildCmd.Flags().StringArray("annotation", []string{}, "Set metadata for an image (default [])")
	image_buildCmd.Flags().String("arch", "amd64", "set the ARCH of the image to the provided value instead of the architecture of the host")
	image_buildCmd.Flags().String("authfile", "", "path of the authentication file.")
	image_buildCmd.Flags().String("blob-cache", "", "assume image blobs in the specified directory will be available for pushing")
	image_buildCmd.Flags().StringArray("build-arg", []string{}, "`argument=value` to supply to the builder")
	image_buildCmd.Flags().String("cache-from", "", "Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.")
	image_buildCmd.Flags().StringSlice("cap-add", []string{}, "add the specified capability when running (default [])")
	image_buildCmd.Flags().StringSlice("cap-drop", []string{}, "drop the specified capability when running (default [])")
	image_buildCmd.Flags().String("cert-dir", "", "use certificates at the specified path to access the registry")
	image_buildCmd.Flags().String("cgroup-parent", "", "optional parent cgroup for the container")
	image_buildCmd.Flags().String("cni-plugin-path", "/usr/libexec/cni:/opt/cni/bin", "`path` of CNI network plugins")
	image_buildCmd.Flags().Bool("compress", false, "This is legacy option, which has no effect on the image")
	image_buildCmd.Flags().Uint64("cpu-period", 0, "limit the CPU CFS (Completely Fair Scheduler) period")
	image_buildCmd.Flags().Int64("cpu-quota", 0, "limit the CPU CFS (Completely Fair Scheduler) quota")
	image_buildCmd.Flags().Uint64P("cpu-shares", "c", 0, "CPU shares (relative weight)")
	image_buildCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	image_buildCmd.Flags().String("cpuset-mems", "", "memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	image_buildCmd.Flags().String("creds", "", "use `[username[:password]]` for accessing the registry")
	image_buildCmd.Flags().StringSlice("decryption-key", []string{}, "key needed to decrypt the image")
	image_buildCmd.Flags().StringArray("device", []string{}, "Additional devices to be used within containers (default [])")
	image_buildCmd.Flags().BoolP("disable-compression", "D", true, "don't compress layers by default")
	image_buildCmd.Flags().Bool("disable-content-trust", false, "This is a Docker specific option and is a NOOP")
	image_buildCmd.Flags().StringSlice("dns", []string{}, "Set custom DNS servers or disable it completely by setting it to 'none', which prevents the automatic creation of `/etc/resolv.conf`.")
	image_buildCmd.Flags().StringSlice("dns-option", []string{}, "Set custom DNS options")
	image_buildCmd.Flags().StringSlice("dns-search", []string{}, "Set custom DNS search domains")
	image_buildCmd.Flags().StringSliceP("file", "f", []string{}, "`pathname or URL` of a Dockerfile")
	image_buildCmd.Flags().Bool("force-rm", true, "Always remove intermediate containers after a build, even if the build is unsuccessful.")
	image_buildCmd.Flags().String("format", "oci", "`format` of the built image's manifest and metadata. Use BUILDAH_FORMAT environment variable to override.")
	image_buildCmd.Flags().String("from", "", "image name used to replace the value in the first FROM instruction in the Containerfile")
	image_buildCmd.Flags().Bool("http-proxy", true, "pass through HTTP Proxy environment variables")
	image_buildCmd.Flags().String("ignorefile", "", "path to an alternate .dockerignore file")
	image_buildCmd.Flags().String("iidfile", "", "`file` to write the image ID to")
	image_buildCmd.Flags().String("ipc", "", "'private', `path` of IPC namespace to join, or 'host'")
	image_buildCmd.Flags().String("isolation", "rootless", "`type` of process isolation to use. Use BUILDAH_ISOLATION environment variable to override.")
	image_buildCmd.Flags().Int("jobs", 1, "how many stages to run in parallel")
	image_buildCmd.Flags().StringArray("label", []string{}, "Set metadata for an image (default [])")
	image_buildCmd.Flags().Bool("layers", true, "cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override.")
	image_buildCmd.Flags().Bool("load", false, "buildx --load")
	image_buildCmd.Flags().Bool("log-rusage", false, "log resource usage at each build step")
	image_buildCmd.Flags().String("logfile", "", "log to `file` instead of stdout/stderr")
	image_buildCmd.Flags().Int("loglevel", 0, "NO LONGER USED, flag ignored, and hidden")
	image_buildCmd.Flags().String("manifest", "", "add the image to the specified manifest list. Creates manifest list if it does not exist")
	image_buildCmd.Flags().StringP("memory", "m", "", "memory limit (format: <number>[<unit>], where unit = b, k, m or g)")
	image_buildCmd.Flags().String("memory-swap", "", "swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	image_buildCmd.Flags().String("network", "", "'private', 'none', 'ns:path' of network namespace to join, or 'host'")
	image_buildCmd.Flags().Bool("no-cache", false, "Do not use existing cached images for the container build. Build from the start with a new set of cached layers.")
	image_buildCmd.Flags().String("os", "linux", "set the OS to the provided value instead of the current operating system of the host")
	image_buildCmd.Flags().String("pid", "", "private, `path` of PID namespace to join, or 'host'")
	image_buildCmd.Flags().StringSlice("platform", []string{"linux/amd64"}, "set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example `linux/arm`)")
	image_buildCmd.Flags().String("progress", "auto", "buildx --progress")
	image_buildCmd.Flags().Bool("pull", true, "Always attempt to pull the image (errors are fatal)")
	image_buildCmd.Flags().Bool("pull-always", false, "pull the image even if the named image is present in store")
	image_buildCmd.Flags().Bool("pull-never", false, "do not pull the image, use the image present in store if available")
	image_buildCmd.Flags().BoolP("quiet", "q", false, "refrain from announcing build instructions and image read/write progress")
	image_buildCmd.Flags().Bool("rm", true, "Remove intermediate containers after a successful build")
	image_buildCmd.Flags().String("rusage-logfile", "", "destination file to which rusage should be logged to instead of stdout (= the default).")
	image_buildCmd.Flags().StringArray("secret", []string{}, "secret file to expose to the build")
	image_buildCmd.Flags().StringArray("security-opt", []string{}, "security options (default [])")
	image_buildCmd.Flags().String("shm-size", "65536k", "size of '/dev/shm'. The format is `<number><unit>`.")
	image_buildCmd.Flags().String("sign-by", "", "sign the image using a GPG key with the specified `FINGERPRINT`")
	image_buildCmd.Flags().String("signature-policy", "", "`pathname` of signature policy file (not usually used)")
	image_buildCmd.Flags().Bool("squash", false, "squash newly built layers into a single new layer")
	image_buildCmd.Flags().Bool("squash-all", false, "Squash all layers into a single layer")
	image_buildCmd.Flags().StringArray("ssh", []string{}, "SSH agent socket or keys to expose to the build. (format: default|<id>[=<socket>|<key>[,<key>]])")
	image_buildCmd.Flags().Bool("stdin", false, "pass stdin into containers")
	image_buildCmd.Flags().StringArrayP("tag", "t", []string{}, "tagged `name` to apply to the built image")
	image_buildCmd.Flags().String("target", "", "set the target build stage to build")
	image_buildCmd.Flags().Int64("timestamp", 0, "set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time")
	image_buildCmd.Flags().Bool("tls-verify", true, "require HTTPS and verify certificates when accessing the registry")
	image_buildCmd.Flags().StringSlice("ulimit", []string{}, "ulimit options")
	image_buildCmd.Flags().String("userns", "", "'container', `path` of user namespace to join, or 'host'")
	image_buildCmd.Flags().StringSlice("userns-gid-map", []string{}, "`containerGID:hostGID:length` GID mapping to use in user namespace")
	image_buildCmd.Flags().String("userns-gid-map-group", "", "`name` of entries from /etc/subgid to use to set user namespace GID mapping")
	image_buildCmd.Flags().StringSlice("userns-uid-map", []string{}, "`containerUID:hostUID:length` UID mapping to use in user namespace")
	image_buildCmd.Flags().String("userns-uid-map-user", "", "`name` of entries from /etc/subuid to use to set user namespace UID mapping")
	image_buildCmd.Flags().String("uts", "", "private, :`path` of UTS namespace to join, or 'host'")
	image_buildCmd.Flags().String("variant", "", "override the `variant` of the specified image")
	image_buildCmd.Flags().StringArrayP("volume", "v", []string{}, "bind mount a volume into the container")
	imageCmd.AddCommand(image_buildCmd)
}
