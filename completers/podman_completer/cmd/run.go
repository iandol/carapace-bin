package cmd

import (
	"github.com/rsteube/carapace"
	"github.com/spf13/cobra"
)

var runCmd = &cobra.Command{
	Use:   "run",
	Short: "Run a command in a new container",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(runCmd).Standalone()
	runCmd.Flags().StringSlice("add-host", []string{}, "Add a custom host-to-IP mapping (host:ip) (default [])")
	runCmd.Flags().StringSlice("annotation", []string{}, "Add annotations to container (key:value)")
	runCmd.Flags().String("arch", "", "use `ARCH` instead of the architecture of the machine for choosing images")
	runCmd.Flags().StringSliceP("attach", "a", []string{}, "Attach to STDIN, STDOUT or STDERR")
	runCmd.Flags().String("authfile", "", "Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override")
	runCmd.Flags().String("blkio-weight", "", "Block IO weight (relative weight) accepts a weight value between 10 and 1000.")
	runCmd.Flags().StringSlice("blkio-weight-device", []string{}, "Block IO weight (relative device weight, format: `DEVICE_NAME:WEIGHT`)")
	runCmd.Flags().StringSlice("cap-add", []string{}, "Add capabilities to the container")
	runCmd.Flags().StringSlice("cap-drop", []string{}, "Drop capabilities from the container")
	runCmd.Flags().StringSlice("cgroup-conf", []string{}, "Configure cgroup v2 (key=value)")
	runCmd.Flags().String("cgroup-parent", "", "Optional parent cgroup for the container")
	runCmd.Flags().String("cgroupns", "", "cgroup namespace to use")
	runCmd.Flags().String("cgroups", "enabled", "control container cgroup configuration (\"enabled\"|\"disabled\"|\"no-conmon\"|\"split\")")
	runCmd.Flags().String("cidfile", "", "Write the container ID to the file")
	runCmd.Flags().String("conmon-pidfile", "", "Path to the file that will receive the PID of conmon")
	runCmd.Flags().Uint64("cpu-period", 0, "Limit the CPU CFS (Completely Fair Scheduler) period")
	runCmd.Flags().Int64("cpu-quota", 0, "Limit the CPU CFS (Completely Fair Scheduler) quota")
	runCmd.Flags().Uint64("cpu-rt-period", 0, "Limit the CPU real-time period in microseconds")
	runCmd.Flags().Int64("cpu-rt-runtime", 0, "Limit the CPU real-time runtime in microseconds")
	runCmd.Flags().Uint64("cpu-shares", 0, "CPU shares (relative weight)")
	runCmd.Flags().Float64("cpus", 0, "Number of CPUs. The default is 0.000 which means no limit")
	runCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	runCmd.Flags().String("cpuset-mems", "", "Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	runCmd.Flags().BoolP("detach", "d", false, "Run container in background and print container ID")
	runCmd.Flags().String("detach-keys", "ctrl-p,ctrl-q", "Override the key sequence for detaching a container.")
	runCmd.Flags().StringSlice("device", []string{}, "Add a host device to the container")
	runCmd.Flags().StringSlice("device-cgroup-rule", []string{}, "Add a rule to the cgroup allowed devices list")
	runCmd.Flags().StringSlice("device-read-bps", []string{}, "Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)")
	runCmd.Flags().StringSlice("device-read-iops", []string{}, "Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)")
	runCmd.Flags().StringSlice("device-write-bps", []string{}, "Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)")
	runCmd.Flags().StringSlice("device-write-iops", []string{}, "Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)")
	runCmd.Flags().Bool("disable-content-trust", false, "This is a Docker specific option and is a NOOP")
	runCmd.Flags().StringSlice("dns", []string{}, "Set custom DNS servers")
	runCmd.Flags().StringSlice("dns-opt", []string{}, "Set custom DNS options")
	runCmd.Flags().StringSlice("dns-search", []string{}, "Set custom DNS search domains")
	runCmd.Flags().String("entrypoint", "", "Overwrite the default ENTRYPOINT of the image")
	runCmd.Flags().StringArrayP("env", "e", []string{"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "TERM=xterm"}, "Set environment variables in container")
	runCmd.Flags().StringSlice("env-file", []string{}, "Read in a file of environment variables")
	runCmd.Flags().Bool("env-host", false, "Use all current host environment variables in container")
	runCmd.Flags().StringSlice("expose", []string{}, "Expose a port or a range of ports")
	runCmd.Flags().StringSlice("gidmap", []string{}, "GID map to use for the user namespace")
	runCmd.Flags().String("gpus", "", "This is a Docker specific option and is a NOOP")
	runCmd.Flags().StringSlice("group-add", []string{}, "Add additional groups to the primary container process. 'keep-groups' allows container processes to use supplementary groups.")
	runCmd.Flags().String("health-cmd", "", "set a healthcheck command for the container ('none' disables the existing healthcheck)")
	runCmd.Flags().String("health-interval", "30s", "set an interval for the healthchecks (a value of disable results in no automatic timer setup)")
	runCmd.Flags().Uint("health-retries", 3, "the number of retries allowed before a healthcheck is considered to be unhealthy")
	runCmd.Flags().String("health-start-period", "0s", "the initialization time needed for a container to bootstrap")
	runCmd.Flags().String("health-timeout", "30s", "the maximum time allowed to complete the healthcheck before an interval is considered failed")
	runCmd.Flags().StringP("hostname", "h", "", "Set container hostname")
	runCmd.Flags().StringSlice("hostuser", []string{}, "Host user account to add to /etc/passwd within container")
	runCmd.Flags().Bool("http-proxy", true, "Set proxy environment variables in the container based on the host proxy vars")
	runCmd.Flags().String("image-volume", "bind", "Tells podman how to handle the builtin image volumes (\"bind\"|\"tmpfs\"|\"ignore\")")
	runCmd.Flags().Bool("init", false, "Run an init binary inside the container that forwards signals and reaps processes")
	runCmd.Flags().String("init-path", "", "Path to the container-init binary")
	runCmd.Flags().BoolP("interactive", "i", false, "Keep STDIN open even if not attached")
	runCmd.Flags().String("ip", "", "Specify a static IPv4 address for the container")
	runCmd.Flags().String("ipc", "", "IPC namespace to use")
	runCmd.Flags().String("kernel-memory", "", "DEPRECATED: Option is just hear for compatibility with Docker")
	runCmd.Flags().StringArrayP("label", "l", []string{}, "Set metadata on container")
	runCmd.Flags().StringSlice("label-file", []string{}, "Read in a line delimited file of labels")
	runCmd.Flags().String("log-driver", "k8s-file", "Logging driver for the container")
	runCmd.Flags().StringSlice("log-opt", []string{}, "Logging driver options")
	runCmd.Flags().String("mac-address", "", "Container MAC address (e.g. 92:d0:c6:0a:29:33)")
	runCmd.Flags().StringP("memory", "m", "", "Memory limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	runCmd.Flags().String("memory-reservation", "", "Memory soft limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	runCmd.Flags().String("memory-swap", "", "Swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	runCmd.Flags().Int64("memory-swappiness", -1, "Tune container memory swappiness (0 to 100, or -1 for system default)")
	runCmd.Flags().StringArray("mount", []string{}, "Attach a filesystem mount to the container")
	runCmd.Flags().String("name", "", "Assign a name to the container")
	runCmd.Flags().StringArray("network", []string{}, "Connect a container to a network")
	runCmd.Flags().StringSlice("network-alias", []string{}, "Add network-scoped alias for the container")
	runCmd.Flags().Bool("no-healthcheck", false, "Disable healthchecks on container")
	runCmd.Flags().Bool("no-hosts", false, "Do not create /etc/hosts within the container, instead use the version from the image")
	runCmd.Flags().Bool("oom-kill-disable", false, "Disable OOM Killer")
	runCmd.Flags().Int("oom-score-adj", 0, "Tune the host's OOM preferences (-1000 to 1000)")
	runCmd.Flags().String("os", "", "use `OS` instead of the running OS for choosing images")
	runCmd.Flags().Bool("passwd", true, "add entries to /etc/passwd and /etc/group")
	runCmd.Flags().String("personality", "", "Configure execution domain using personality (e.g., LINUX/LINUX32)")
	runCmd.Flags().String("pid", "", "PID namespace to use")
	runCmd.Flags().String("pidfile", "", "Write the container process ID to the file")
	runCmd.Flags().Int64("pids-limit", 0, "Tune container pids limit (set -1 for unlimited)")
	runCmd.Flags().String("platform", "", "Specify the platform for selecting the image.  (Conflicts with --arch and --os)")
	runCmd.Flags().String("pod", "", "Run container in an existing pod")
	runCmd.Flags().String("pod-id-file", "", "Read the pod ID from the file")
	runCmd.Flags().Uint("preserve-fds", 0, "Pass a number of additional file descriptors into the container")
	runCmd.Flags().Bool("privileged", false, "Give extended privileges to container")
	runCmd.Flags().StringSliceP("publish", "p", []string{}, "Publish a container's port, or a range of ports, to the host (default [])")
	runCmd.Flags().BoolP("publish-all", "P", false, "Publish all exposed ports to random ports on the host interface")
	runCmd.Flags().String("pull", "missing", "Pull image before creating (\"always\"|\"missing\"|\"never\")")
	runCmd.Flags().BoolP("quiet", "q", false, "Suppress output information when pulling images")
	runCmd.Flags().Bool("read-only", false, "Make containers root filesystem read-only")
	runCmd.Flags().Bool("read-only-tmpfs", true, "When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp")
	runCmd.Flags().Bool("replace", false, "If a container with the same name exists, replace it")
	runCmd.Flags().StringSlice("requires", []string{}, "Add one or more requirement containers that must be started before this container will start")
	runCmd.Flags().String("restart", "", "Restart policy to apply when a container exits (\"always\"|\"no\"|\"on-failure\"|\"unless-stopped\")")
	runCmd.Flags().Bool("rm", false, "Remove container (and pod if created) after exit")
	runCmd.Flags().Bool("rmi", false, "Remove container image unless used by other containers")
	runCmd.Flags().Bool("rootfs", false, "The first argument is not an image but the rootfs to the exploded container")
	runCmd.Flags().String("sdnotify", "container", "control sd-notify behavior (\"container\"|\"conmon\"|\"ignore\")")
	runCmd.Flags().String("seccomp-policy", "default", "Policy for selecting a seccomp profile (experimental)")
	runCmd.Flags().StringArray("secret", []string{}, "Add secret to container")
	runCmd.Flags().StringArray("security-opt", []string{}, "Security Options")
	runCmd.Flags().String("shm-size", "65536k", "Size of /dev/shm (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	runCmd.Flags().Bool("sig-proxy", true, "Proxy received signals to the process")
	runCmd.Flags().String("signature-policy", "", "`Pathname` of signature policy file (not usually used)")
	runCmd.Flags().String("stop-signal", "", "Signal to stop a container. Default is SIGTERM")
	runCmd.Flags().Uint("stop-timeout", 10, "Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL.")
	runCmd.Flags().String("subgidname", "", "Name of range listed in /etc/subgid for use in user namespace")
	runCmd.Flags().String("subuidname", "", "Name of range listed in /etc/subuid for use in user namespace")
	runCmd.Flags().StringSlice("sysctl", []string{}, "Sysctl options")
	runCmd.Flags().String("systemd", "true", "Run container in systemd mode (\"true\"|\"false\"|\"always\")")
	runCmd.Flags().Uint("timeout", 0, "Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.")
	runCmd.Flags().Bool("tls-verify", false, "Require HTTPS and verify certificates when contacting registries for pulling images")
	runCmd.Flags().StringArray("tmpfs", []string{}, "Mount a temporary filesystem (`tmpfs`) into a container")
	runCmd.Flags().BoolP("tty", "t", false, "Allocate a pseudo-TTY for container")
	runCmd.Flags().String("tz", "", "Set timezone in container")
	runCmd.Flags().StringSlice("uidmap", []string{}, "UID map to use for the user namespace")
	runCmd.Flags().StringSlice("ulimit", []string{}, "Ulimit options")
	runCmd.Flags().String("umask", "0022", "Set umask in container")
	runCmd.Flags().StringArray("unsetenv", []string{}, "Unset environment default variables in container")
	runCmd.Flags().Bool("unsetenv-all", false, "Unset all default environment variables in container")
	runCmd.Flags().StringP("user", "u", "", "Username or UID (format: <name|uid>[:<group|gid>])")
	runCmd.Flags().String("userns", "", "User namespace to use")
	runCmd.Flags().String("uts", "", "UTS namespace to use")
	runCmd.Flags().String("variant", "", "Use `VARIANT` instead of the running architecture variant for choosing images")
	runCmd.Flags().StringArrayP("volume", "v", []string{}, "Bind mount a volume into the container")
	runCmd.Flags().StringArray("volumes-from", []string{}, "Mount volumes from the specified container(s)")
	runCmd.Flags().StringP("workdir", "w", "", "Working directory inside the container")
	rootCmd.AddCommand(runCmd)
}
