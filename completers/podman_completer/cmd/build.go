package cmd

import (
	"github.com/rsteube/carapace"
	"github.com/spf13/cobra"
)

var buildCmd = &cobra.Command{
	Use:   "build",
	Short: "Build an image using instructions from Containerfiles",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(buildCmd).Standalone()
	buildCmd.Flags().StringSlice("add-host", []string{}, "add a custom host-to-IP mapping (`host:ip`) (default [])")
	buildCmd.Flags().StringArray("annotation", []string{}, "Set metadata for an image (default [])")
	buildCmd.Flags().String("arch", "amd64", "set the ARCH of the image to the provided value instead of the architecture of the host")
	buildCmd.Flags().String("authfile", "", "path of the authentication file.")
	buildCmd.Flags().String("blob-cache", "", "assume image blobs in the specified directory will be available for pushing")
	buildCmd.Flags().StringArray("build-arg", []string{}, "`argument=value` to supply to the builder")
	buildCmd.Flags().String("cache-from", "", "Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.")
	buildCmd.Flags().StringSlice("cap-add", []string{}, "add the specified capability when running (default [])")
	buildCmd.Flags().StringSlice("cap-drop", []string{}, "drop the specified capability when running (default [])")
	buildCmd.Flags().String("cert-dir", "", "use certificates at the specified path to access the registry")
	buildCmd.Flags().String("cgroup-parent", "", "optional parent cgroup for the container")
	buildCmd.Flags().String("cni-plugin-path", "/usr/libexec/cni:/opt/cni/bin", "`path` of CNI network plugins")
	buildCmd.Flags().Bool("compress", false, "This is legacy option, which has no effect on the image")
	buildCmd.Flags().Uint64("cpu-period", 0, "limit the CPU CFS (Completely Fair Scheduler) period")
	buildCmd.Flags().Int64("cpu-quota", 0, "limit the CPU CFS (Completely Fair Scheduler) quota")
	buildCmd.Flags().Uint64P("cpu-shares", "c", 0, "CPU shares (relative weight)")
	buildCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	buildCmd.Flags().String("cpuset-mems", "", "memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	buildCmd.Flags().String("creds", "", "use `[username[:password]]` for accessing the registry")
	buildCmd.Flags().StringSlice("decryption-key", []string{}, "key needed to decrypt the image")
	buildCmd.Flags().StringArray("device", []string{}, "Additional devices to be used within containers (default [])")
	buildCmd.Flags().BoolP("disable-compression", "D", true, "don't compress layers by default")
	buildCmd.Flags().Bool("disable-content-trust", false, "This is a Docker specific option and is a NOOP")
	buildCmd.Flags().StringSlice("dns", []string{}, "Set custom DNS servers or disable it completely by setting it to 'none', which prevents the automatic creation of `/etc/resolv.conf`.")
	buildCmd.Flags().StringSlice("dns-option", []string{}, "Set custom DNS options")
	buildCmd.Flags().StringSlice("dns-search", []string{}, "Set custom DNS search domains")
	buildCmd.Flags().StringSliceP("file", "f", []string{}, "`pathname or URL` of a Dockerfile")
	buildCmd.Flags().Bool("force-rm", true, "Always remove intermediate containers after a build, even if the build is unsuccessful.")
	buildCmd.Flags().String("format", "oci", "`format` of the built image's manifest and metadata. Use BUILDAH_FORMAT environment variable to override.")
	buildCmd.Flags().String("from", "", "image name used to replace the value in the first FROM instruction in the Containerfile")
	buildCmd.Flags().Bool("http-proxy", true, "pass through HTTP Proxy environment variables")
	buildCmd.Flags().String("ignorefile", "", "path to an alternate .dockerignore file")
	buildCmd.Flags().String("iidfile", "", "`file` to write the image ID to")
	buildCmd.Flags().String("ipc", "", "'private', `path` of IPC namespace to join, or 'host'")
	buildCmd.Flags().String("isolation", "rootless", "`type` of process isolation to use. Use BUILDAH_ISOLATION environment variable to override.")
	buildCmd.Flags().Int("jobs", 1, "how many stages to run in parallel")
	buildCmd.Flags().StringArray("label", []string{}, "Set metadata for an image (default [])")
	buildCmd.Flags().Bool("layers", true, "cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override.")
	buildCmd.Flags().Bool("load", false, "buildx --load")
	buildCmd.Flags().Bool("log-rusage", false, "log resource usage at each build step")
	buildCmd.Flags().String("logfile", "", "log to `file` instead of stdout/stderr")
	buildCmd.Flags().Int("loglevel", 0, "NO LONGER USED, flag ignored, and hidden")
	buildCmd.Flags().String("manifest", "", "add the image to the specified manifest list. Creates manifest list if it does not exist")
	buildCmd.Flags().StringP("memory", "m", "", "memory limit (format: <number>[<unit>], where unit = b, k, m or g)")
	buildCmd.Flags().String("memory-swap", "", "swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	buildCmd.Flags().String("network", "", "'private', 'none', 'ns:path' of network namespace to join, or 'host'")
	buildCmd.Flags().Bool("no-cache", false, "Do not use existing cached images for the container build. Build from the start with a new set of cached layers.")
	buildCmd.Flags().String("os", "linux", "set the OS to the provided value instead of the current operating system of the host")
	buildCmd.Flags().String("pid", "", "private, `path` of PID namespace to join, or 'host'")
	buildCmd.Flags().StringSlice("platform", []string{"linux/amd64"}, "set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example `linux/arm`)")
	buildCmd.Flags().String("progress", "auto", "buildx --progress")
	buildCmd.Flags().Bool("pull", true, "Always attempt to pull the image (errors are fatal)")
	buildCmd.Flags().Bool("pull-always", false, "pull the image even if the named image is present in store")
	buildCmd.Flags().Bool("pull-never", false, "do not pull the image, use the image present in store if available")
	buildCmd.Flags().BoolP("quiet", "q", false, "refrain from announcing build instructions and image read/write progress")
	buildCmd.Flags().Bool("rm", true, "Remove intermediate containers after a successful build")
	buildCmd.Flags().String("rusage-logfile", "", "destination file to which rusage should be logged to instead of stdout (= the default).")
	buildCmd.Flags().StringArray("secret", []string{}, "secret file to expose to the build")
	buildCmd.Flags().StringArray("security-opt", []string{}, "security options (default [])")
	buildCmd.Flags().String("shm-size", "65536k", "size of '/dev/shm'. The format is `<number><unit>`.")
	buildCmd.Flags().String("sign-by", "", "sign the image using a GPG key with the specified `FINGERPRINT`")
	buildCmd.Flags().String("signature-policy", "", "`pathname` of signature policy file (not usually used)")
	buildCmd.Flags().Bool("squash", false, "squash newly built layers into a single new layer")
	buildCmd.Flags().Bool("squash-all", false, "Squash all layers into a single layer")
	buildCmd.Flags().StringArray("ssh", []string{}, "SSH agent socket or keys to expose to the build. (format: default|<id>[=<socket>|<key>[,<key>]])")
	buildCmd.Flags().Bool("stdin", false, "pass stdin into containers")
	buildCmd.Flags().StringArrayP("tag", "t", []string{}, "tagged `name` to apply to the built image")
	buildCmd.Flags().String("target", "", "set the target build stage to build")
	buildCmd.Flags().Int64("timestamp", 0, "set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time")
	buildCmd.Flags().Bool("tls-verify", true, "require HTTPS and verify certificates when accessing the registry")
	buildCmd.Flags().StringSlice("ulimit", []string{}, "ulimit options")
	buildCmd.Flags().String("userns", "", "'container', `path` of user namespace to join, or 'host'")
	buildCmd.Flags().StringSlice("userns-gid-map", []string{}, "`containerGID:hostGID:length` GID mapping to use in user namespace")
	buildCmd.Flags().String("userns-gid-map-group", "", "`name` of entries from /etc/subgid to use to set user namespace GID mapping")
	buildCmd.Flags().StringSlice("userns-uid-map", []string{}, "`containerUID:hostUID:length` UID mapping to use in user namespace")
	buildCmd.Flags().String("userns-uid-map-user", "", "`name` of entries from /etc/subuid to use to set user namespace UID mapping")
	buildCmd.Flags().String("uts", "", "private, :`path` of UTS namespace to join, or 'host'")
	buildCmd.Flags().String("variant", "", "override the `variant` of the specified image")
	buildCmd.Flags().StringArrayP("volume", "v", []string{}, "bind mount a volume into the container")
	rootCmd.AddCommand(buildCmd)
}
