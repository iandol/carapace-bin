package cmd

import (
	"github.com/rsteube/carapace"
	"github.com/spf13/cobra"
)

var createCmd = &cobra.Command{
	Use:   "create",
	Short: "Create but do not start a container",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(createCmd).Standalone()
	createCmd.Flags().StringSlice("add-host", []string{}, "Add a custom host-to-IP mapping (host:ip) (default [])")
	createCmd.Flags().StringSlice("annotation", []string{}, "Add annotations to container (key:value)")
	createCmd.Flags().String("arch", "", "use `ARCH` instead of the architecture of the machine for choosing images")
	createCmd.Flags().StringSliceP("attach", "a", []string{}, "Attach to STDIN, STDOUT or STDERR")
	createCmd.Flags().String("authfile", "", "Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override")
	createCmd.Flags().String("blkio-weight", "", "Block IO weight (relative weight) accepts a weight value between 10 and 1000.")
	createCmd.Flags().StringSlice("blkio-weight-device", []string{}, "Block IO weight (relative device weight, format: `DEVICE_NAME:WEIGHT`)")
	createCmd.Flags().StringSlice("cap-add", []string{}, "Add capabilities to the container")
	createCmd.Flags().StringSlice("cap-drop", []string{}, "Drop capabilities from the container")
	createCmd.Flags().StringSlice("cgroup-conf", []string{}, "Configure cgroup v2 (key=value)")
	createCmd.Flags().String("cgroup-parent", "", "Optional parent cgroup for the container")
	createCmd.Flags().String("cgroupns", "", "cgroup namespace to use")
	createCmd.Flags().String("cgroups", "enabled", "control container cgroup configuration (\"enabled\"|\"disabled\"|\"no-conmon\"|\"split\")")
	createCmd.Flags().String("cidfile", "", "Write the container ID to the file")
	createCmd.Flags().String("conmon-pidfile", "", "Path to the file that will receive the PID of conmon")
	createCmd.Flags().Uint64("cpu-period", 0, "Limit the CPU CFS (Completely Fair Scheduler) period")
	createCmd.Flags().Int64("cpu-quota", 0, "Limit the CPU CFS (Completely Fair Scheduler) quota")
	createCmd.Flags().Uint64("cpu-rt-period", 0, "Limit the CPU real-time period in microseconds")
	createCmd.Flags().Int64("cpu-rt-runtime", 0, "Limit the CPU real-time runtime in microseconds")
	createCmd.Flags().Uint64("cpu-shares", 0, "CPU shares (relative weight)")
	createCmd.Flags().Float64("cpus", 0, "Number of CPUs. The default is 0.000 which means no limit")
	createCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	createCmd.Flags().String("cpuset-mems", "", "Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	createCmd.Flags().StringSlice("device", []string{}, "Add a host device to the container")
	createCmd.Flags().StringSlice("device-cgroup-rule", []string{}, "Add a rule to the cgroup allowed devices list")
	createCmd.Flags().StringSlice("device-read-bps", []string{}, "Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)")
	createCmd.Flags().StringSlice("device-read-iops", []string{}, "Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)")
	createCmd.Flags().StringSlice("device-write-bps", []string{}, "Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)")
	createCmd.Flags().StringSlice("device-write-iops", []string{}, "Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)")
	createCmd.Flags().Bool("disable-content-trust", false, "This is a Docker specific option and is a NOOP")
	createCmd.Flags().StringSlice("dns", []string{}, "Set custom DNS servers")
	createCmd.Flags().StringSlice("dns-opt", []string{}, "Set custom DNS options")
	createCmd.Flags().StringSlice("dns-search", []string{}, "Set custom DNS search domains")
	createCmd.Flags().String("entrypoint", "", "Overwrite the default ENTRYPOINT of the image")
	createCmd.Flags().StringArrayP("env", "e", []string{"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "TERM=xterm"}, "Set environment variables in container")
	createCmd.Flags().StringSlice("env-file", []string{}, "Read in a file of environment variables")
	createCmd.Flags().Bool("env-host", false, "Use all current host environment variables in container")
	createCmd.Flags().StringSlice("expose", []string{}, "Expose a port or a range of ports")
	createCmd.Flags().StringSlice("gidmap", []string{}, "GID map to use for the user namespace")
	createCmd.Flags().StringSlice("group-add", []string{}, "Add additional groups to the primary container process. 'keep-groups' allows container processes to use supplementary groups.")
	createCmd.Flags().String("health-cmd", "", "set a healthcheck command for the container ('none' disables the existing healthcheck)")
	createCmd.Flags().String("health-interval", "30s", "set an interval for the healthchecks (a value of disable results in no automatic timer setup)")
	createCmd.Flags().Uint("health-retries", 3, "the number of retries allowed before a healthcheck is considered to be unhealthy")
	createCmd.Flags().String("health-start-period", "0s", "the initialization time needed for a container to bootstrap")
	createCmd.Flags().String("health-timeout", "30s", "the maximum time allowed to complete the healthcheck before an interval is considered failed")
	createCmd.Flags().StringP("hostname", "h", "", "Set container hostname")
	createCmd.Flags().StringSlice("hostuser", []string{}, "Host user account to add to /etc/passwd within container")
	createCmd.Flags().Bool("http-proxy", true, "Set proxy environment variables in the container based on the host proxy vars")
	createCmd.Flags().String("image-volume", "bind", "Tells podman how to handle the builtin image volumes (\"bind\"|\"tmpfs\"|\"ignore\")")
	createCmd.Flags().Bool("init", false, "Run an init binary inside the container that forwards signals and reaps processes")
	createCmd.Flags().String("init-ctr", "", "Make this a pod init container.")
	createCmd.Flags().String("init-path", "", "Path to the container-init binary")
	createCmd.Flags().BoolP("interactive", "i", false, "Keep STDIN open even if not attached")
	createCmd.Flags().String("ip", "", "Specify a static IPv4 address for the container")
	createCmd.Flags().String("ipc", "", "IPC namespace to use")
	createCmd.Flags().String("kernel-memory", "", "DEPRECATED: Option is just hear for compatibility with Docker")
	createCmd.Flags().StringArrayP("label", "l", []string{}, "Set metadata on container")
	createCmd.Flags().StringSlice("label-file", []string{}, "Read in a line delimited file of labels")
	createCmd.Flags().String("log-driver", "k8s-file", "Logging driver for the container")
	createCmd.Flags().StringSlice("log-opt", []string{}, "Logging driver options")
	createCmd.Flags().String("mac-address", "", "Container MAC address (e.g. 92:d0:c6:0a:29:33)")
	createCmd.Flags().StringP("memory", "m", "", "Memory limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	createCmd.Flags().String("memory-reservation", "", "Memory soft limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	createCmd.Flags().String("memory-swap", "", "Swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	createCmd.Flags().Int64("memory-swappiness", -1, "Tune container memory swappiness (0 to 100, or -1 for system default)")
	createCmd.Flags().StringArray("mount", []string{}, "Attach a filesystem mount to the container")
	createCmd.Flags().String("name", "", "Assign a name to the container")
	createCmd.Flags().StringArray("network", []string{}, "Connect a container to a network")
	createCmd.Flags().StringSlice("network-alias", []string{}, "Add network-scoped alias for the container")
	createCmd.Flags().Bool("no-healthcheck", false, "Disable healthchecks on container")
	createCmd.Flags().Bool("no-hosts", false, "Do not create /etc/hosts within the container, instead use the version from the image")
	createCmd.Flags().Bool("oom-kill-disable", false, "Disable OOM Killer")
	createCmd.Flags().Int("oom-score-adj", 0, "Tune the host's OOM preferences (-1000 to 1000)")
	createCmd.Flags().String("os", "", "use `OS` instead of the running OS for choosing images")
	createCmd.Flags().String("personality", "", "Configure execution domain using personality (e.g., LINUX/LINUX32)")
	createCmd.Flags().String("pid", "", "PID namespace to use")
	createCmd.Flags().String("pidfile", "", "Write the container process ID to the file")
	createCmd.Flags().Int64("pids-limit", 0, "Tune container pids limit (set -1 for unlimited)")
	createCmd.Flags().String("platform", "", "Specify the platform for selecting the image.  (Conflicts with --arch and --os)")
	createCmd.Flags().String("pod", "", "Run container in an existing pod")
	createCmd.Flags().String("pod-id-file", "", "Read the pod ID from the file")
	createCmd.Flags().Bool("privileged", false, "Give extended privileges to container")
	createCmd.Flags().StringSliceP("publish", "p", []string{}, "Publish a container's port, or a range of ports, to the host (default [])")
	createCmd.Flags().BoolP("publish-all", "P", false, "Publish all exposed ports to random ports on the host interface")
	createCmd.Flags().String("pull", "missing", "Pull image before creating (\"always\"|\"missing\"|\"never\")")
	createCmd.Flags().BoolP("quiet", "q", false, "Suppress output information when pulling images")
	createCmd.Flags().Bool("read-only", false, "Make containers root filesystem read-only")
	createCmd.Flags().Bool("read-only-tmpfs", true, "When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp")
	createCmd.Flags().Bool("replace", false, "If a container with the same name exists, replace it")
	createCmd.Flags().StringSlice("requires", []string{}, "Add one or more requirement containers that must be started before this container will start")
	createCmd.Flags().String("restart", "", "Restart policy to apply when a container exits (\"always\"|\"no\"|\"on-failure\"|\"unless-stopped\")")
	createCmd.Flags().Bool("rm", false, "Remove container (and pod if created) after exit")
	createCmd.Flags().Bool("rootfs", false, "The first argument is not an image but the rootfs to the exploded container")
	createCmd.Flags().String("sdnotify", "container", "control sd-notify behavior (\"container\"|\"conmon\"|\"ignore\")")
	createCmd.Flags().String("seccomp-policy", "default", "Policy for selecting a seccomp profile (experimental)")
	createCmd.Flags().StringArray("secret", []string{}, "Add secret to container")
	createCmd.Flags().StringArray("security-opt", []string{}, "Security Options")
	createCmd.Flags().String("shm-size", "65536k", "Size of /dev/shm (format: `<number>[<unit>]`, where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))")
	createCmd.Flags().String("signature-policy", "", "`Pathname` of signature policy file (not usually used)")
	createCmd.Flags().String("stop-signal", "", "Signal to stop a container. Default is SIGTERM")
	createCmd.Flags().Uint("stop-timeout", 10, "Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL.")
	createCmd.Flags().String("subgidname", "", "Name of range listed in /etc/subgid for use in user namespace")
	createCmd.Flags().String("subuidname", "", "Name of range listed in /etc/subuid for use in user namespace")
	createCmd.Flags().StringSlice("sysctl", []string{}, "Sysctl options")
	createCmd.Flags().String("systemd", "true", "Run container in systemd mode (\"true\"|\"false\"|\"always\")")
	createCmd.Flags().Uint("timeout", 0, "Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.")
	createCmd.Flags().Bool("tls-verify", false, "Require HTTPS and verify certificates when contacting registries for pulling images")
	createCmd.Flags().StringArray("tmpfs", []string{}, "Mount a temporary filesystem (`tmpfs`) into a container")
	createCmd.Flags().BoolP("tty", "t", false, "Allocate a pseudo-TTY for container")
	createCmd.Flags().String("tz", "", "Set timezone in container")
	createCmd.Flags().StringSlice("uidmap", []string{}, "UID map to use for the user namespace")
	createCmd.Flags().StringSlice("ulimit", []string{}, "Ulimit options")
	createCmd.Flags().String("umask", "0022", "Set umask in container")
	createCmd.Flags().StringArray("unsetenv", []string{}, "Unset environment default variables in container")
	createCmd.Flags().Bool("unsetenv-all", false, "Unset all default environment variables in container")
	createCmd.Flags().StringP("user", "u", "", "Username or UID (format: <name|uid>[:<group|gid>])")
	createCmd.Flags().String("userns", "", "User namespace to use")
	createCmd.Flags().String("uts", "", "UTS namespace to use")
	createCmd.Flags().String("variant", "", "Use `VARIANT` instead of the running architecture variant for choosing images")
	createCmd.Flags().StringArrayP("volume", "v", []string{}, "Bind mount a volume into the container")
	createCmd.Flags().StringArray("volumes-from", []string{}, "Mount volumes from the specified container(s)")
	createCmd.Flags().StringP("workdir", "w", "", "Working directory inside the container")
	rootCmd.AddCommand(createCmd)
}
